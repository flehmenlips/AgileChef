// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  clerkId       String    @unique // Clerk's user ID
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  boards        Board[]   @relation("BoardMembers")
  ownedBoards   Board[]
  cards         Card[]    @relation("CardAssignees")
  comments      Comment[]
}

model Board {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  members     User[]    @relation("BoardMembers")
  columns     Column[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublic    Boolean   @default(false)
}

model Column {
  id        String   @id @default(uuid())
  title     String
  order     Int
  limit     Int?
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String    @id @default(uuid())
  title       String
  description String?
  priority    Priority? @default(MEDIUM)
  columnId    String
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  order       Int
  assignees   User[]    @relation("CardAssignees")
  labels      Label[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
}

model Label {
  id        String   @id @default(uuid())
  name      String
  color     String
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
} 